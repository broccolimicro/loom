name: Build and Upload Release Binaries

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            from: "lm"
            to: "lm-linux"
          - os: macos-latest
            from: "lm"
            to: "lm-macos"
          - os: windows-latest
            from: "lm-windows.zip"
            to: "lm-windows.zip"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive # This ensures submodules are pulled and initialized

      - name: Install dependencies on Linux
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y build-essential ninja-build libqhull-dev libgraphviz-dev

      - name: Install dependencies on macOS
        if: matrix.os == 'macos-latest'
        run: brew install cmake ninja qhull graphviz # or any other required dependencies for macOS

      - name: Install MSYS2
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          path-type: inherit

      - name: Install dependencies on Windows
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          pacman -Syu --noconfirm
          pacman -S --needed --noconfirm base-devel
          pacman -S --needed --noconfirm msys2-runtime-devel
          pacman -S --needed --noconfirm mingw-w64-x86_64-toolchain
          pacman -S --needed --noconfirm mingw-w64-x86_64-cmake
          pacman -S --needed --noconfirm mingw-w64-x86_64-ninja
          pacman -S --needed --noconfirm mingw-w64-x86_64-qhull
          pacman -S --needed --noconfirm mingw-w64-x86_64-zlib
          pacman -S --needed --noconfirm mingw-w64-x86_64-graphviz
          pacman -S zip

      - name: Build binary on Linux and macOS
        if: matrix.os != 'windows-latest'
        run: make
        shell: bash

      - name: Build binary on Windows
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          make
          mkdir -p lm-windows
          ldd lm.exe | grep "mingw64" | sed 's/.*\/mingw64/\/mingw64/g' | sed 's/ (.*$//g' | xargs -I{} cp {} lm-windows
          cp lm.exe lm-windows
          zip -r lm-windows.zip lm-windows

      - name: Upload Release Asset
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ matrix.from }}
          asset_name: ${{ matrix.to }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.LOOM_RELEASE }}
